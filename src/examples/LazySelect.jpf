# app checked by JPF
target=probabilistic.test.LazySelect

# command line arguments of app
target.args=3,9,7,1,6

# directory that contains the bytecode of the app
classpath=${jpf-probabilistic}/build/examples

# using the JPF extensions jpf-label and jpf-probabilistic
@using jpf-label
@using jpf-probabilistic

# label the final states
label.class=label.End

# generate a textual representation of the labelled Markov chain
listener=label.StateLabelText,probabilistic.listener.StateSpaceText

# generate a graphical representation of the labelled Markov chain 
listener+=,probabilistic.listener.StateSpaceDot,probabilistic.listener.StateLabelVisitor,probabilistic.listener.ExploredStatesVisitor

# use JPF's breadth first search strategy to explore the state space
search.class=gov.nasa.jpf.search.heuristic.BFSHeuristic

# limit the search to the first thirty states
listener+=,gov.nasa.jpf.listener.BudgetChecker
budget.max_state=30
